// <auto-generated />
using System;
using Ingredients_order.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ingredients_order.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505224500_Initial_1")]
    partial class Initial_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ingredients_order.Models.BinAttachmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BinNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("BinStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Bins");
                });

            modelBuilder.Entity("Ingredients_order.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<int>("MaterialNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 0.0,
                            MaterialNumber = 4405021,
                            Name = "Cukier",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 0.0,
                            MaterialNumber = 4431245,
                            Name = "Mleko zagęszczone",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 0.0,
                            MaterialNumber = 4460655,
                            Name = "Odpieniacz",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 0.0,
                            MaterialNumber = 4433212,
                            Name = "Konserwant",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 0.0,
                            MaterialNumber = 4477132,
                            Name = "Aromat Krówka",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 0.0,
                            MaterialNumber = 4498443,
                            Name = "Truskawka",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 0.0,
                            MaterialNumber = 4458216,
                            Name = "Skrobia modyfikowana",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 0.0,
                            MaterialNumber = 4465543,
                            Name = "Aromat truskawka",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 0.0,
                            MaterialNumber = 4494328,
                            Name = "Wiśnia",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 0.0,
                            MaterialNumber = 4465503,
                            Name = "Aromat wiśnia",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 0.0,
                            MaterialNumber = 4475934,
                            Name = "Guma Xantan",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 0.0,
                            MaterialNumber = 4416630,
                            Name = "Aromat waniliowy",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 0.0,
                            MaterialNumber = 0,
                            Name = "Woda",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 0.0,
                            MaterialNumber = 4409530,
                            Name = "Syrop glukozowy",
                            SectionName = "Składniki"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 1.0,
                            MaterialNumber = 4439904,
                            Name = "Butelka czarna 1 kg",
                            SectionName = "Opakowania",
                            Use = "Container"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 10.0,
                            MaterialNumber = 4477398,
                            Name = "Wiadro białe 10 kg",
                            SectionName = "Opakowania",
                            Use = "Container"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 3.2000000000000002,
                            MaterialNumber = 4033456,
                            Name = "Wiadro czerwone 3.2 kg",
                            SectionName = "Opakowania",
                            Use = "Container"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 0.0,
                            MaterialNumber = 4499540,
                            Name = "Nakrentka RD50",
                            SectionName = "Opakowania",
                            Use = "Cap"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 0.0,
                            MaterialNumber = 4432324,
                            Name = "Wieczko niebeiske średnica 18 cm (3.2 kg)",
                            SectionName = "Opakowania",
                            Use = "Cap"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 0.0,
                            MaterialNumber = 4466950,
                            Name = "Wieczko białe średnica 32 cm (10 kg)",
                            SectionName = "Opakowania",
                            Use = "Cap"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 0.0,
                            MaterialNumber = 4436904,
                            Name = "Naklejka 100x100 biała",
                            SectionName = "Opakowania",
                            Use = "Label"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 0.0,
                            MaterialNumber = 4410932,
                            Name = "Naklejka Truskawka w żelu 3.2 kg",
                            SectionName = "Opakowania",
                            Use = "Label"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 0.0,
                            MaterialNumber = 4490437,
                            Name = "Naklejka Wiśnia w żelu 3.2 kg",
                            SectionName = "Opakowania",
                            Use = "Label"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 0.0,
                            MaterialNumber = 4400475,
                            Name = "Naklejka Sos Krówka 1 kg",
                            SectionName = "Opakowania",
                            Use = "Label"
                        });
                });

            modelBuilder.Entity("Ingredients_order.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("IlośćNaklejek")
                        .HasColumnType("int");

                    b.Property<int>("IlośćOpakowań")
                        .HasColumnType("int");

                    b.Property<int>("IlośćPokrywNekrętek")
                        .HasColumnType("int");

                    b.Property<string>("Naklejka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NrZlecenia")
                        .HasColumnType("int");

                    b.Property<string>("Opakowanie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PokrywaNekrętka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("RecipesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Ingredients_order.Models.ItemsCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("IngredientCount")
                        .HasColumnType("float");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemsCount");
                });

            modelBuilder.Entity("Ingredients_order.Models.MachineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessModelId");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Process machine № 1",
                            ProcessModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Process machine № 2",
                            ProcessModelId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Process machine № 3",
                            ProcessModelId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Packing machine № 1",
                            ProcessModelId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Packing machine № 2",
                            ProcessModelId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Packing machine № 3",
                            ProcessModelId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Packing machine № 4",
                            ProcessModelId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Packing machine № 5",
                            ProcessModelId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Area № 1",
                            ProcessModelId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Area № 2",
                            ProcessModelId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dry good's Area",
                            ProcessModelId = 4
                        });
                });

            modelBuilder.Entity("Ingredients_order.Models.NewOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IngredientNumber")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NewOrders");
                });

            modelBuilder.Entity("Ingredients_order.Models.OrdersForWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataRealizacji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataZamówienia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientNumber")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<long>("Palett")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrdersForWarehouse");
                });

            modelBuilder.Entity("Ingredients_order.Models.PalettModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ilość")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("Localization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NewOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersForWarehouseId")
                        .HasColumnType("int");

                    b.Property<long>("PalletNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("NewOrderId");

                    b.HasIndex("OrdersForWarehouseId");

                    b.ToTable("PalettModel");
                });

            modelBuilder.Entity("Ingredients_order.Models.ProcessModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Process Area"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Packing Area"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Warehouse"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dry good's Area"
                        });
                });

            modelBuilder.Entity("Ingredients_order.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sos krówka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Truskawka w żelu"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wiśnia w żelu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nadzienie waniliowe"
                        });
                });

            modelBuilder.Entity("Ingredients_order.Models.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Relations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 162.0,
                            IngredientsId = 1,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 430.0,
                            IngredientsId = 2,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1.3,
                            IngredientsId = 3,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2.2000000000000002,
                            IngredientsId = 4,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 4.7000000000000002,
                            IngredientsId = 5,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 400.0,
                            IngredientsId = 13,
                            RecipeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Amount = 300.0,
                            IngredientsId = 1,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 8,
                            Amount = 42.0,
                            IngredientsId = 4,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Amount = 530.0,
                            IngredientsId = 6,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Amount = 2.7000000000000002,
                            IngredientsId = 7,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Amount = 5.0999999999999996,
                            IngredientsId = 8,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Amount = 120.0,
                            IngredientsId = 13,
                            RecipeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Amount = 230.0,
                            IngredientsId = 1,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 14,
                            Amount = 4.2000000000000002,
                            IngredientsId = 4,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 15,
                            Amount = 570.0,
                            IngredientsId = 9,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Amount = 40.0,
                            IngredientsId = 7,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Amount = 6.0999999999999996,
                            IngredientsId = 10,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 18,
                            Amount = 150.0,
                            IngredientsId = 13,
                            RecipeId = 3
                        },
                        new
                        {
                            Id = 19,
                            Amount = 340.0,
                            IngredientsId = 1,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 20,
                            Amount = 3.6000000000000001,
                            IngredientsId = 4,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 21,
                            Amount = 4.7000000000000002,
                            IngredientsId = 11,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 22,
                            Amount = 120.0,
                            IngredientsId = 7,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 23,
                            Amount = 5.2000000000000002,
                            IngredientsId = 12,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 24,
                            Amount = 250.0,
                            IngredientsId = 13,
                            RecipeId = 4
                        },
                        new
                        {
                            Id = 25,
                            Amount = 276.5,
                            IngredientsId = 14,
                            RecipeId = 4
                        });
                });

            modelBuilder.Entity("Ingredients_order.Models.UsersIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36b4c701-25a5-4b2f-ace6-9c5c11459daa",
                            Email = "sara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "sara@gmail.com",
                            NormalizedUserName = "Sara",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjXqAuibzCziw9z0sM6PEowND7Wdy/kSC3EsWavfQLogTvpQRzy2x+YdHIi4xmZNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Sara"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5afc610d-42c9-49c9-a5f3-69d110bfedc3",
                            Email = "petro@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "petro@gmail.com",
                            NormalizedUserName = "Petro",
                            PasswordHash = "AQAAAAEAACcQAAAAECtWUYaCyzUPsiIZM8+N10brXxfjeuEghpZIXNy051hB/ZBVmEeyNIg+WjIHf1+C8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Petro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "731ed15c-2220-449d-b23a-43ef1b2eaa24",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            ConcurrencyStamp = "f805f473-f6e9-4af7-98bc-ce9492b603d8",
                            Name = "NormalUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ingredients_order.Models.BinAttachmentModel", b =>
                {
                    b.HasOne("Ingredients_order.Models.MachineModel", "Machine")
                        .WithMany("Bins")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("Ingredients_order.Models.MachineModel", b =>
                {
                    b.HasOne("Ingredients_order.Models.ProcessModel", "Process")
                        .WithMany("Machines")
                        .HasForeignKey("ProcessModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Ingredients_order.Models.PalettModel", b =>
                {
                    b.HasOne("Ingredients_order.Models.Ingredient", "Material")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingredients_order.Models.NewOrder", "NewOrder")
                        .WithMany("Paletts")
                        .HasForeignKey("NewOrderId");

                    b.HasOne("Ingredients_order.Models.OrdersForWarehouse", "OrdersForWarehouse")
                        .WithMany()
                        .HasForeignKey("OrdersForWarehouseId");

                    b.Navigation("Material");

                    b.Navigation("NewOrder");

                    b.Navigation("OrdersForWarehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ingredients_order.Models.UsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ingredients_order.Models.UsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingredients_order.Models.UsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ingredients_order.Models.UsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingredients_order.Models.MachineModel", b =>
                {
                    b.Navigation("Bins");
                });

            modelBuilder.Entity("Ingredients_order.Models.NewOrder", b =>
                {
                    b.Navigation("Paletts");
                });

            modelBuilder.Entity("Ingredients_order.Models.ProcessModel", b =>
                {
                    b.Navigation("Machines");
                });
#pragma warning restore 612, 618
        }
    }
}
